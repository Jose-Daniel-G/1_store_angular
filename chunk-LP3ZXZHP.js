import{a as m}from"./chunk-EK5HOP4N.js";import{i as h}from"./chunk-LM5SF62Y.js";import{J as n,L as s,P as c,U as g,a,b as u,n as i,y as l}from"./chunk-TIETC33F.js";var p=class o{constructor(r){this.http=r}baseUrl=m.URL_SERVICIOS;csrfUrl=`${this.baseUrl.replace("/api","")}/sanctum/csrf-cookie`;loginUrl=`${this.baseUrl}/login`;logoutUrl=`${this.baseUrl}/logout`;userUrl=`${this.baseUrl}/user`;login(r){return this.http.get(this.csrfUrl,{withCredentials:!0}).pipe(n(()=>this.http.post(this.loginUrl,r,{withCredentials:!0})),s(e=>{if(e.access_token&&e.user)localStorage.setItem("access_token",e.access_token),this.setCurrentUser(e.user,e.roles||[]);else throw new Error("Invalid login response from server: access_token or user data missing.")}),n(()=>this.http.get(this.userUrl,{withCredentials:!0})),s(e=>{let t=this.getUserRoles();this.setCurrentUser(e,t)}),l(e=>(localStorage.removeItem("user"),localStorage.removeItem("access_token"),i(()=>e))))}logout(){return console.log("AuthService - Initiating logout."),this.http.post(this.logoutUrl,{},{withCredentials:!0}).pipe(s(()=>{localStorage.removeItem("user"),localStorage.removeItem("access_token"),console.log("AuthService - Logout successful. Token and user cleared from localStorage.")}),l(r=>(console.error("AuthService - Error during logout:",r),localStorage.removeItem("user"),localStorage.removeItem("access_token"),i(()=>r))))}setCurrentUser(r,e=[]){let t=u(a({},r),{roles:e});localStorage.setItem("user",JSON.stringify(t))}getCurrentUser(){let r=localStorage.getItem("user");try{return r?JSON.parse(r):null}catch(e){return console.error("Error parsing user from localStorage:",e),localStorage.removeItem("user"),null}}getUserRoles(){return this.getCurrentUser()?.roles||[]}getToken(){return localStorage.getItem("access_token")}isAuthenticated(){return!!this.getCurrentUser()&&!!this.getToken()}hasPermission(r){let e=this.getCurrentUser();if(console.log("[AuthService] Usuario actual:",e),!e||!e.permissions||e.permissions.length===0)return console.log(`[AuthService] hasPermission('${r}'): Usuario no logueado o no tiene permisos en el objeto de usuario. Resultado: false`),!1;let t=e.permissions.includes(r);return console.log(`[AuthService] hasPermission('${r}'): El permiso ${t?"FUE ENCONTRADO":"NO FUE ENCONTRADO"}. Resultado: ${t}`),t}hasRole(r){return this.getUserRoles().includes(r)}static \u0275fac=function(e){return new(e||o)(g(h))};static \u0275prov=c({token:o,factory:o.\u0275fac,providedIn:"root"})};export{p as a};
